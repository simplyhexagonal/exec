{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { exec as execCallback } from 'child_process';\n\nimport elean from '@simplyhexagonal/elean';\nimport MonoContext from '@simplyhexagonal/mono-context';\n\n// @ts-ignore\nexport { version } from '../package.json';\n\nexport interface ExecResult {\n  exitCode:number;\n  stdoutOutput:string;\n  stderrOutput:string;\n}\n\nexport class ExecError extends Error {\n  exitCode:number;\n  stdoutOutput:string;\n  stderrOutput:string;\n\n  constructor(message:string, exitCode:number, stdoutOutput:string, stderrOutput:string) {\n    super(message);\n\n    this.exitCode = exitCode;\n    this.stdoutOutput = stdoutOutput;\n    this.stderrOutput = stderrOutput;\n  };\n}\n\nconst { REALTIME_LOG } = process.env;\n\nconst shouldRealtimeLog = elean(REALTIME_LOG);\n\nconst realtimeLog = (...args: any[]) => {\n  const logger = MonoContext.getStateValue('logger') || console;\n\n  if (shouldRealtimeLog) {\n    logger.debug(...args);\n  }\n}\n\nconst exec = async (command: string) => {\n  const logger = MonoContext.getStateValue('logger') || console;\n\n  const child = execCallback(command);\n\n  const {stdout, stderr} = child;\n\n  const stdoutChunks: any[] = [];\n  const stderrChunks: any[] = [];\n\n  let stdoutOutput = '';\n  let stderrOutput = '';\n\n  stdout?.on('data', (chunk) => {realtimeLog(chunk);stdoutChunks.push(Buffer.from(chunk));});\n  stderr?.on('data', (chunk) => {realtimeLog(chunk);stderrChunks.push(Buffer.from(chunk));});\n\n  const stdoutPromise = new Promise<void>((resolve, reject) => {\n    stdout?.on('end', () => {\n      stdoutOutput = Buffer.concat(stdoutChunks).toString('utf8');\n      resolve();\n    });\n  });\n\n  const stderrPromise = new Promise<void>((resolve, reject) => {\n    stderr?.on('end', () => {\n      stderrOutput = Buffer.concat(stderrChunks).toString('utf8');\n      resolve();\n    });\n  });\n\n  return await (\n    new Promise<ExecResult>(\n      (resolve, reject) => {\n        child.addListener('error', reject);\n        child.addListener('exit', async (exitCode: number) => {\n          await stdoutPromise;\n          await stderrPromise;\n\n          if (stdoutOutput && !shouldRealtimeLog) {\n            logger.debug(stdoutOutput);\n          }\n\n          if (exitCode === 0 && stderrOutput) {\n            await logger.warn(stderrOutput);\n          }\n\n          if (exitCode !== 0) {\n            logger.debug(`Error exit code is: ${exitCode}`);\n\n            reject(\n              new ExecError(\n                stderrOutput || stdoutOutput,\n                exitCode,\n                stdoutOutput,\n                stderrOutput\n              )\n            );\n          }\n\n          resolve({\n            exitCode,\n            stdoutOutput,\n            stderrOutput,\n          });\n        });\n      }\n    )\n  );\n};\n\nexport default exec;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAqC;AAErC,mBAAkB;AAClB,0BAAwB;;;;;;AAWjB,8BAAwB,MAAM;AAAA,EAKnC,YAAY,SAAgB,UAAiB,cAAqB,cAAqB;AACrF,UAAM;AAEN,SAAK,WAAW;AAChB,SAAK,eAAe;AACpB,SAAK,eAAe;AAAA;AAAA;AAIxB,IAAM,EAAE,iBAAiB,QAAQ;AAEjC,IAAM,oBAAoB,0BAAM;AAEhC,IAAM,cAAc,IAAI,SAAgB;AACtC,QAAM,SAAS,4BAAY,cAAc,aAAa;AAEtD,MAAI,mBAAmB;AACrB,WAAO,MAAM,GAAG;AAAA;AAAA;AAIpB,IAAM,OAAO,OAAO,YAAoB;AACtC,QAAM,SAAS,4BAAY,cAAc,aAAa;AAEtD,QAAM,QAAQ,+BAAa;AAE3B,QAAM,EAAC,QAAQ,WAAU;AAEzB,QAAM,eAAsB;AAC5B,QAAM,eAAsB;AAE5B,MAAI,eAAe;AACnB,MAAI,eAAe;AAEnB,UAAQ,GAAG,QAAQ,CAAC,UAAU;AAAC,gBAAY;AAAO,iBAAa,KAAK,OAAO,KAAK;AAAA;AAChF,UAAQ,GAAG,QAAQ,CAAC,UAAU;AAAC,gBAAY;AAAO,iBAAa,KAAK,OAAO,KAAK;AAAA;AAEhF,QAAM,gBAAgB,IAAI,QAAc,CAAC,SAAS,WAAW;AAC3D,YAAQ,GAAG,OAAO,MAAM;AACtB,qBAAe,OAAO,OAAO,cAAc,SAAS;AACpD;AAAA;AAAA;AAIJ,QAAM,gBAAgB,IAAI,QAAc,CAAC,SAAS,WAAW;AAC3D,YAAQ,GAAG,OAAO,MAAM;AACtB,qBAAe,OAAO,OAAO,cAAc,SAAS;AACpD;AAAA;AAAA;AAIJ,SAAO,MACL,IAAI,QACF,CAAC,SAAS,WAAW;AACnB,UAAM,YAAY,SAAS;AAC3B,UAAM,YAAY,QAAQ,OAAO,aAAqB;AACpD,YAAM;AACN,YAAM;AAEN,UAAI,gBAAgB,CAAC,mBAAmB;AACtC,eAAO,MAAM;AAAA;AAGf,UAAI,aAAa,KAAK,cAAc;AAClC,cAAM,OAAO,KAAK;AAAA;AAGpB,UAAI,aAAa,GAAG;AAClB,eAAO,MAAM,uBAAuB;AAEpC,eACE,IAAI,UACF,gBAAgB,cAChB,UACA,cACA;AAAA;AAKN,cAAQ;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA;AAAA;AAAA;AAAA;AAQZ,IAAO,cAAQ;",
  "names": []
}
