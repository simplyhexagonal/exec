{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { exec as execCallback } from 'child_process';\n\nimport elean from '@simplyhexagonal/elean';\nimport MonoContext from '@simplyhexagonal/mono-context';\n\n// @ts-ignore\nexport { version } from '../package.json';\n\nexport interface ExecOptions {\n  realtimeStdout?: boolean;\n  logStdout?: boolean;\n  logStderr?: boolean;\n  loggerInstance?: any;\n  stdoutLogLevel?: 'debug' | 'info' | 'warn' | 'error' | 'fatal' | 'all' | 'raw';\n  stderrLogLevel?: 'debug' | 'info' | 'warn' | 'error' | 'fatal' | 'all' | 'raw';\n}\n\nexport interface ExecResult {\n  exitCode:number;\n  stdoutOutput:string;\n  stderrOutput:string;\n}\n\nexport class ExecError extends Error {\n  exitCode:number;\n  stdoutOutput:string;\n  stderrOutput:string;\n\n  constructor(message:string, exitCode:number, stdoutOutput:string, stderrOutput:string) {\n    super(message);\n\n    this.exitCode = exitCode;\n    this.stdoutOutput = stdoutOutput;\n    this.stderrOutput = stderrOutput;\n  };\n}\n\nconst { REALTIME_LOG } = process.env;\n\nconst exec = (\n  command: string,\n  options?: ExecOptions,\n) => {\n  const {\n    realtimeStdout,\n    logStdout,\n    logStderr,\n    loggerInstance,\n    stdoutLogLevel,\n    stderrLogLevel,\n  } = options || {};\n\n  const shouldRealtimeLog = realtimeStdout || elean(REALTIME_LOG);\n\n  const logger = loggerInstance || MonoContext.getStateValue('logger') || console;\n\n  const child = execCallback(command);\n\n  const {stdout, stderr} = child;\n\n  const stdoutChunks: any[] = [];\n  const stderrChunks: any[] = [];\n\n  let stdoutOutput = '';\n  let stderrOutput = '';\n\n  stdout?.on('data', (chunk) => {\n    logStdout && realtimeStdout && chunk && logger && logger[stdoutLogLevel || 'debug'](chunk);\n    stdoutChunks.push(Buffer.from(chunk));\n  });\n  stderr?.on('data', (chunk) => {\n    logStderr && realtimeStdout && chunk && logger && logger[stderrLogLevel || 'debug'](chunk);\n    stderrChunks.push(Buffer.from(chunk));\n  });\n\n  const stdoutPromise = new Promise<void>((resolve, reject) => {\n    stdout?.on('end', () => {\n      stdoutOutput = Buffer.concat(stdoutChunks).toString('utf8');\n      resolve();\n    });\n  });\n\n  const stderrPromise = new Promise<void>((resolve, reject) => {\n    stderr?.on('end', () => {\n      stderrOutput = Buffer.concat(stderrChunks).toString('utf8');\n      resolve();\n    });\n  });\n\n  return {\n    execProcess: child,\n    execPromise: new Promise<ExecResult>(\n      (resolve, reject) => {\n        child.addListener('error', reject);\n        child.addListener('exit', async (exitCode: number) => {\n          await stdoutPromise;\n          await stderrPromise;\n\n          if (stdoutOutput && !shouldRealtimeLog && logStdout) {\n            logger[stdoutLogLevel || 'debug'](stdoutOutput);\n          }\n\n          if (exitCode === 0 && stderrOutput && logStderr) {\n            await logger[stderrLogLevel || 'warn'](stderrOutput);\n          }\n\n          if (exitCode !== 0 && logStderr) {\n            logger[stderrLogLevel || 'warn'](`Error exit code of command \"${command}\" is: ${exitCode}`);\n\n            reject(\n              new ExecError(\n                stderrOutput || stdoutOutput,\n                exitCode,\n                stdoutOutput,\n                stderrOutput\n              )\n            );\n          }\n\n          resolve({\n            exitCode,\n            stdoutOutput,\n            stderrOutput,\n          });\n        });\n      }\n    )\n  };\n};\n\nexport default exec;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAqC;AAErC,mBAAkB;AAClB,0BAAwB;;;;;;AAoBjB,8BAAwB,MAAM;AAAA,EAKnC,YAAY,SAAgB,UAAiB,cAAqB,cAAqB;AACrF,UAAM;AAEN,SAAK,WAAW;AAChB,SAAK,eAAe;AACpB,SAAK,eAAe;AAAA;AAAA;AAIxB,IAAM,EAAE,iBAAiB,QAAQ;AAEjC,IAAM,OAAO,CACX,SACA,YACG;AACH,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACE,WAAW;AAEf,QAAM,oBAAoB,kBAAkB,0BAAM;AAElD,QAAM,SAAS,kBAAkB,4BAAY,cAAc,aAAa;AAExE,QAAM,QAAQ,+BAAa;AAE3B,QAAM,EAAC,QAAQ,WAAU;AAEzB,QAAM,eAAsB;AAC5B,QAAM,eAAsB;AAE5B,MAAI,eAAe;AACnB,MAAI,eAAe;AAEnB,UAAQ,GAAG,QAAQ,CAAC,UAAU;AAC5B,iBAAa,kBAAkB,SAAS,UAAU,OAAO,kBAAkB,SAAS;AACpF,iBAAa,KAAK,OAAO,KAAK;AAAA;AAEhC,UAAQ,GAAG,QAAQ,CAAC,UAAU;AAC5B,iBAAa,kBAAkB,SAAS,UAAU,OAAO,kBAAkB,SAAS;AACpF,iBAAa,KAAK,OAAO,KAAK;AAAA;AAGhC,QAAM,gBAAgB,IAAI,QAAc,CAAC,SAAS,WAAW;AAC3D,YAAQ,GAAG,OAAO,MAAM;AACtB,qBAAe,OAAO,OAAO,cAAc,SAAS;AACpD;AAAA;AAAA;AAIJ,QAAM,gBAAgB,IAAI,QAAc,CAAC,SAAS,WAAW;AAC3D,YAAQ,GAAG,OAAO,MAAM;AACtB,qBAAe,OAAO,OAAO,cAAc,SAAS;AACpD;AAAA;AAAA;AAIJ,SAAO;AAAA,IACL,aAAa;AAAA,IACb,aAAa,IAAI,QACf,CAAC,SAAS,WAAW;AACnB,YAAM,YAAY,SAAS;AAC3B,YAAM,YAAY,QAAQ,OAAO,aAAqB;AACpD,cAAM;AACN,cAAM;AAEN,YAAI,gBAAgB,CAAC,qBAAqB,WAAW;AACnD,iBAAO,kBAAkB,SAAS;AAAA;AAGpC,YAAI,aAAa,KAAK,gBAAgB,WAAW;AAC/C,gBAAM,OAAO,kBAAkB,QAAQ;AAAA;AAGzC,YAAI,aAAa,KAAK,WAAW;AAC/B,iBAAO,kBAAkB,QAAQ,+BAA+B,gBAAgB;AAEhF,iBACE,IAAI,UACF,gBAAgB,cAChB,UACA,cACA;AAAA;AAKN,gBAAQ;AAAA,UACN;AAAA,UACA;AAAA,UACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQZ,IAAO,cAAQ;",
  "names": []
}
